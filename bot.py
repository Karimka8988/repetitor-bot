import logging
import os
import aiohttp
import io
import json
from datetime import datetime, timedelta
from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, LabeledPrice
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes, ConversationHandler, PreCheckoutQueryHandler, MessageHandler, filters
from course_content import COURSE_CONTENT
from urllib.parse import urlencode
import asyncio
import time
from yoomoney import Client, Quickpay
import hashlib
import telegram.error
import shutil
from pathlib import Path

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
BACKUP_DIR = 'backups'
USERS_DATA_FILE = 'users_data.json'
COURSE_PRICE = 1900
YOOMONEY_WALLET = "4100117110526370"
ADMIN_USER_ID = 7762388025

# –°–æ—Å—Ç–æ—è–Ω–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
CHOOSING_LEVEL, PAYMENT, SHOWING_LESSON, WAITING_HOMEWORK, CHOOSING_SUBSCRIPTION = range(5)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ÆMoney
LEVELS = {
    'A1': {'name': 'Beginner - —É—Ä–æ–≤–µ–Ω—å –≤—ã–∂–∏–≤–∞–Ω–∏—è', 'price': COURSE_PRICE},
    'A2': {'name': 'Elementary - –ø—Ä–µ–¥–ø–æ—Ä–æ–≥–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å', 'price': COURSE_PRICE},
    'B1': {'name': 'Intermediate - –ø–æ—Ä–æ–≥–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å', 'price': COURSE_PRICE},
    'B2': {'name': 'Upper-Intermediate - –ø–æ—Ä–æ–≥–æ–≤—ã–π –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π —É—Ä–æ–≤–µ–Ω—å', 'price': COURSE_PRICE},
    'C1': {'name': 'Advanced - —É—Ä–æ–≤–µ–Ω—å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –≤–ª–∞–¥–µ–Ω–∏—è', 'price': COURSE_PRICE},
    'C2': {'name': 'Proficiency - —É—Ä–æ–≤–µ–Ω—å –≤–ª–∞–¥–µ–Ω–∏—è –≤ —Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–µ', 'price': COURSE_PRICE}
}

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
try:
    load_dotenv()
except Exception as e:
    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ .env —Ñ–∞–π–ª–∞: {e}")

# –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –ª–æ–≥–æ–≤ –∏ –±—ç–∫–∞–ø–æ–≤
log_dir = Path('logs')
backup_dir = Path(BACKUP_DIR)
try:
    log_dir.mkdir(exist_ok=True)
    backup_dir.mkdir(exist_ok=True)
except Exception as e:
    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π: {e}")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
try:
    logging.basicConfig(
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
        level=logging.INFO,
        handlers=[
            logging.FileHandler(log_dir / 'bot.log', encoding='utf-8'),
            logging.StreamHandler()
        ]
    )
except Exception as e:
    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")

logger = logging.getLogger(__name__)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
REQUIRED_ENV_VARS = {
    'TELEGRAM_TOKEN': os.getenv('TELEGRAM_TOKEN'),
    'VOICERSS_API_KEY': os.getenv('VOICERSS_API_KEY')
}

for var_name, var_value in REQUIRED_ENV_VARS.items():
    if not var_value:
        logger.error(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è: {var_name}")
        raise EnvironmentError(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç {var_name}")

def backup_users_data():
    """–°–æ–∑–¥–∞–µ—Ç —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é —Ñ–∞–π–ª–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    try:
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        Path(BACKUP_DIR).mkdir(exist_ok=True)
        
        if not os.path.exists(USERS_DATA_FILE):
            logger.warning("‚ö†Ô∏è –ù–µ—Ç —Ñ–∞–π–ª–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏")
            return False
            
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ —Å —Ç–µ–∫—É—â–µ–π –¥–∞—Ç–æ–π –∏ –≤—Ä–µ–º–µ–Ω–µ–º
        backup_file = f"{BACKUP_DIR}/users_data_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
        
        # –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª
        shutil.copy2(USERS_DATA_FILE, backup_file)
        logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {backup_file}")
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏ (–æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5)
        try:
            backup_files = sorted(Path(BACKUP_DIR).glob('users_data_*.json'))
            if len(backup_files) > 5:
                for old_file in backup_files[:-5]:
                    old_file.unlink()
                    logger.info(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–∞ —Å—Ç–∞—Ä–∞—è —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {old_file}")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Å—Ç–∞—Ä—ã—Ö —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π: {e}")
        
        return True
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: {e}")
        return False

def load_users_data():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Ñ–∞–π–ª–∞"""
    try:
        if not os.path.exists(USERS_DATA_FILE):
            logger.warning("‚ö†Ô∏è –§–∞–π–ª –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π")
            return {}
            
        with open(USERS_DATA_FILE, 'r', encoding='utf-8') as file:
            data = json.load(file)
            if not isinstance(data, dict):
                logger.error("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
                return {}
            return data
    except json.JSONDecodeError as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ JSON: {e}")
        # –ü—Ä–æ–±—É–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
        try:
            backup_files = sorted(Path(BACKUP_DIR).glob('users_data_*.json'))
            if backup_files:
                latest_backup = backup_files[-1]
                with open(latest_backup, 'r', encoding='utf-8') as file:
                    data = json.load(file)
                    if not isinstance(data, dict):
                        raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –≤ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏")
                logger.info(f"‚úÖ –î–∞–Ω–Ω—ã–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: {latest_backup}")
                return data
            else:
                logger.warning("‚ö†Ô∏è –†–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                return {}
        except Exception as backup_error:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: {backup_error}")
            return {}
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
        return {}

def save_users_data(data):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ñ–∞–π–ª"""
    if not isinstance(data, dict):
        logger.error("‚ùå –ü–æ–ø—ã—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        return False
        
    try:
        # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
        backup_users_data()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        temp_file = f"{USERS_DATA_FILE}.tmp"
        with open(temp_file, 'w', encoding='utf-8') as file:
            json.dump(data, file, ensure_ascii=False, indent=4)
            
        # –ï—Å–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ, –∑–∞–º–µ–Ω—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª
        os.replace(temp_file, USERS_DATA_FILE)
        logger.info("‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
        return True
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        if os.path.exists(temp_file):
            try:
                os.remove(temp_file)
            except:
                pass
        return False

def get_user_data(user_id):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    users_data = load_users_data()
    return users_data.get(str(user_id), {})

def update_user_data(user_id, data):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    users_data = load_users_data()
    users_data[str(user_id)] = data
    save_users_data(users_data)

def can_access_next_lesson(user_id):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —É—Ä–æ–∫—É"""
    user_data = get_user_data(user_id)
    if not user_data:
        return True
    
    last_lesson_date = datetime.fromisoformat(user_data.get('last_lesson_date', '2000-01-01'))
    current_date = datetime.now()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—à–ª–∏ –ª–∏ —Å—É—Ç–∫–∏ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É—Ä–æ–∫–∞
    return (current_date - last_lesson_date).days >= 1

async def get_pronunciation_audio(text: str) -> bytes:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∞—É–¥–∏–æ —Å –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ–º –æ—Ç Text-to-Speech —Å–µ—Ä–≤–∏—Å–∞"""
    if not text or not isinstance(text, str):
        logger.error("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏—è")
        return None
        
    if not REQUIRED_ENV_VARS['VOICERSS_API_KEY']:
        logger.error("‚ùå API –∫–ª—é—á –¥–ª—è Text-to-Speech —Å–µ—Ä–≤–∏—Å–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return None
        
    try:
        params = {
            'key': REQUIRED_ENV_VARS['VOICERSS_API_KEY'],
            'hl': 'en-us',
            'v': 'Mary',
            'src': text,
            'c': 'MP3',
            'f': '44khz_16bit_stereo',
            'r': '0',
            'b64': 'false'
        }
        
        url = 'https://api.voicerss.org/'
        
        async with aiohttp.ClientSession() as session:
            async with session.post(url, data=params) as response:
                if response.status == 200:
                    audio_content = await response.read()
                    content_type = response.headers.get('Content-Type', '')
                    
                    if len(audio_content) > 1000 and 'audio' in content_type:
                        logger.info(f"‚úÖ –ê—É–¥–∏–æ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–æ, —Ä–∞–∑–º–µ—Ä: {len(audio_content)} –±–∞–π—Ç")
                        return audio_content
                    else:
                        error_text = audio_content.decode('utf-8', errors='ignore')
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ—Ç–≤–µ—Ç–µ API: {error_text}")
                        return None
                else:
                    error_text = await response.text()
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞—É–¥–∏–æ: {response.status} - {error_text}")
                    return None
    except aiohttp.ClientError as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞—É–¥–∏–æ: {str(e)}")
        return None
    except Exception as e:
        logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞—É–¥–∏–æ: {str(e)}")
        return None

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º"""
    user_id = update.effective_user.id
    logger.info(f"üöÄ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")
    user_data = get_user_data(user_id)
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –Ω–∞—á–∞–ª –∫—É—Ä—Å, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π —É—Ä–æ–∫
    if user_data and user_data.get('level'):
        context.user_data.update(user_data)
        message = f"""
üéì *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ –≤ English Learning Bot!*

üìä *–í–∞—à —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å:*
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
üéØ –£—Ä–æ–≤–µ–Ω—å: {user_data['level']} {get_level_emoji(user_data['level'])}
üìÖ –î–µ–Ω—å: {user_data['day']} –∏–∑ 14
‚è∞ –ü–æ—Å–ª–µ–¥–Ω–∏–π —É—Ä–æ–∫: {user_data['last_lesson_date']}
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

‚ö†Ô∏è _–ü–ª–∞–Ω –æ–±—É—á–µ–Ω–∏—è –Ω–µ–ª—å–∑—è –∏–∑–º–µ–Ω–∏—Ç—å –¥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –∫—É—Ä—Å–∞._

üïí *–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è —É—Ä–æ–∫–∞:*
"""
        keyboard = [
            [
                InlineKeyboardButton("üåÖ –£—Ç—Ä–µ–Ω–Ω–∏–π —É—Ä–æ–∫", callback_data="time:morning"),
                InlineKeyboardButton("‚òÄÔ∏è –î–Ω–µ–≤–Ω–æ–π —É—Ä–æ–∫", callback_data="time:afternoon"),
            ],
            [
                InlineKeyboardButton("üåô –í–µ—á–µ—Ä–Ω–∏–π —É—Ä–æ–∫", callback_data="time:evening")
            ]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(
            message,
            parse_mode='Markdown',
            reply_markup=reply_markup
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å –∏ –≤—Ä–µ–º—è –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
        context.user_data['current_day'] = user_data['day']
        context.user_data['time_of_day'] = user_data.get('time_of_day', 'morning')
        
        return SHOWING_LESSON
    
    # –î–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
    welcome_message = """
üåü *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ English Learning Bot!* üåü
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üìö –í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –≤ –∏–∑—É—á–µ–Ω–∏–∏ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞! 

*–ß—Ç–æ –≤–∞—Å –∂–¥—ë—Ç:*
üéØ 14 –¥–Ω–µ–π –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è
üìù –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —É—Ä–æ–∫–∏ –∏ –ø—Ä–∞–∫—Ç–∏–∫–∞
üìñ –ò–∑—É—á–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö —Å–ª–æ–≤ –∏ –≥—Ä–∞–º–º–∞—Ç–∏–∫–∏
üéß –ê—É–¥–∏–æ –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ –æ—Ç –Ω–æ—Å–∏—Ç–µ–ª–µ–π —è–∑—ã–∫–∞
üéÆ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
‚ö†Ô∏è *–í–ê–ñ–ù–û–ï –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï:*
–ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ —É—Ä–æ–≤–Ω—è –æ–±—É—á–µ–Ω–∏—è –µ–≥–æ –Ω–µ–ª—å–∑—è –±—É–¥–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å –¥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è 14-–¥–Ω–µ–≤–Ω–æ–≥–æ –∫—É—Ä—Å–∞. 

üí´ *–ì–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ –≤ –º–∏—Ä –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞?*
"""
    keyboard = [
        [InlineKeyboardButton("‚ú® –î–∞, —Ö–æ—á—É –≤—ã–±—Ä–∞—Ç—å —É—Ä–æ–≤–µ–Ω—å!", callback_data="ready_to_choose")],
        [InlineKeyboardButton("ü§î –ù–µ—Ç, –º–Ω–µ –Ω—É–∂–Ω–æ –ø–æ–¥—É–º–∞—Ç—å", callback_data="not_ready")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        welcome_message,
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )
    return CHOOSING_LEVEL

def get_level_emoji(level: str) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç–º–æ–¥–∑–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É—Ä–æ–≤–Ω—è"""
    emoji_map = {
        'A1': 'üå±',  # –ù–∞—á–∏–Ω–∞—é—â–∏–π
        'A2': 'üåø',  # –≠–ª–µ–º–µ–Ω—Ç–∞—Ä–Ω—ã–π
        'B1': 'üå∫',  # –°—Ä–µ–¥–Ω–∏–π
        'B2': 'üå∏',  # –í—ã—à–µ —Å—Ä–µ–¥–Ω–µ–≥–æ
        'C1': 'üå≥',  # –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π
        'C2': 'üéì'   # –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π
    }
    return emoji_map.get(level, '')

async def handle_ready_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ –≤—ã–±–æ—Ä—É —É—Ä–æ–≤–Ω—è"""
    query = update.callback_query
    await query.answer()
    
    if query.data == "not_ready":
        message = """
ü§î *–ù–µ —Ç–æ—Ä–æ–ø–∏—Ç–µ—Å—å —Å –≤—ã–±–æ—Ä–æ–º!*
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üí° *–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –≤—ã–±–æ—Ä—É —É—Ä–æ–≤–Ω—è:*

üå± *A1 - Beginner*
‚Ä¢ –¢–æ–ª—å–∫–æ –Ω–∞—á–∏–Ω–∞–µ—Ç–µ –∏–∑—É—á–∞—Ç—å —è–∑—ã–∫
‚Ä¢ –ó–Ω–∞–µ—Ç–µ –∞–ª—Ñ–∞–≤–∏—Ç –∏ –±–∞–∑–æ–≤—ã–µ —Å–ª–æ–≤–∞
‚Ä¢ –•–æ—Ç–∏—Ç–µ –Ω–∞—É—á–∏—Ç—å—Å—è –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—Ç—å—Å—è

üåø *A2 - Elementary*
‚Ä¢ –ó–Ω–∞–µ—Ç–µ –±–∞–∑–æ–≤—ã–µ —Ñ—Ä–∞–∑—ã
‚Ä¢ –ü–æ–Ω–∏–º–∞–µ—Ç–µ –ø—Ä–æ—Å—Ç—ã–µ —Ç–µ–∫—Å—Ç—ã
‚Ä¢ –ú–æ–∂–µ—Ç–µ —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –æ —Å–µ–±–µ

üå∫ *B1 - Intermediate*
‚Ä¢ –û–±—â–∞–µ—Ç–µ—Å—å –Ω–∞ –±—ã—Ç–æ–≤—ã–µ —Ç–µ–º—ã
‚Ä¢ –ü–æ–Ω–∏–º–∞–µ—Ç–µ –º–µ–¥–ª–µ–Ω–Ω—É—é —Ä–µ—á—å
‚Ä¢ –ß–∏—Ç–∞–µ—Ç–µ –ø—Ä–æ—Å—Ç—ã–µ —Å—Ç–∞—Ç—å–∏

üå∏ *B2 - Upper-Intermediate*
‚Ä¢ –°–≤–æ–±–æ–¥–Ω–æ –≥–æ–≤–æ—Ä–∏—Ç–µ –Ω–∞ –º–Ω–æ–≥–∏–µ —Ç–µ–º—ã
‚Ä¢ –°–º–æ—Ç—Ä–∏—Ç–µ —Ñ–∏–ª—å–º—ã –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª–µ
‚Ä¢ –ß–∏—Ç–∞–µ—Ç–µ –∫–Ω–∏–≥–∏ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º

üå≥ *C1 - Advanced*
‚Ä¢ –í–ª–∞–¥–µ–µ—Ç–µ —è–∑—ã–∫–æ–º –ø–æ—á—Ç–∏ –∫–∞–∫ –Ω–æ—Å–∏—Ç–µ–ª—å
‚Ä¢ –ü–æ–Ω–∏–º–∞–µ—Ç–µ —Å–ª–æ–∂–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã
‚Ä¢ –ì–æ–≤–æ—Ä–∏—Ç–µ –±–µ–≥–ª–æ –∏ —Å–ø–æ–Ω—Ç–∞–Ω–Ω–æ

üéì *C2 - Proficiency*
‚Ä¢ –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–µ –≤–ª–∞–¥–µ–Ω–∏–µ
‚Ä¢ –ü–æ–Ω–∏–º–∞–µ—Ç–µ –ª—é–±—É—é —Ä–µ—á—å
‚Ä¢ –ü–∏—à–µ—Ç–µ —Å–ª–æ–∂–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
‚ú® –ö–æ–≥–¥–∞ –±—É–¥–µ—Ç–µ –≥–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ,
–ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ /start
"""
        await query.edit_message_text(
            message,
            parse_mode='Markdown'
        )
        return ConversationHandler.END
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —É—Ä–æ–≤–Ω–µ–π
    message = """
üìö *–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —É—Ä–æ–≤–µ–Ω—å –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ*
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

‚ú® *–ö–∞–∂–¥—ã–π —É—Ä–æ–≤–µ–Ω—å –≤–∫–ª—é—á–∞–µ—Ç:*
üìÖ 14 –¥–Ω–µ–π –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è
üéØ 3 —É—Ä–æ–∫–∞ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å
üéß –ê—É–¥–∏–æ –æ—Ç –Ω–æ—Å–∏—Ç–µ–ª–µ–π —è–∑—ã–∫–∞
üìù –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞–Ω–∏—è
üìä –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
‚ö†Ô∏è *–í–ê–ñ–ù–û:* 
‚Ä¢ –£—Ä–æ–≤–µ–Ω—å –Ω–µ–ª—å–∑—è –∏–∑–º–µ–Ω–∏—Ç—å –¥–æ –∫–æ–Ω—Ü–∞ –∫—É—Ä—Å–∞
‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –¥–ª—è –≤–∞—Å —É—Ä–æ–≤–µ–Ω—å
‚Ä¢ –ë—É–¥—å—Ç–µ –≥–æ—Ç–æ–≤—ã –∑–∞–Ω–∏–º–∞—Ç—å—Å—è 14 –¥–Ω–µ–π

*–î–æ—Å—Ç—É–ø–Ω—ã–µ —É—Ä–æ–≤–Ω–∏:*
"""
    keyboard = []
    for level, info in LEVELS.items():
        keyboard.append([InlineKeyboardButton(
            f"{get_level_emoji(level)} {level} - {info['name']}", 
            callback_data=f"confirm_{level}"
        )])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(
        message,
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )
    return CHOOSING_LEVEL

async def level_chosen(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —É—Ä–æ–≤–Ω—è"""
    query = update.callback_query
    await query.answer()
    
    if not query.data.startswith('confirm_'):
        return CHOOSING_LEVEL
    
    level = query.data.split('_')[1]  # confirm_A1 -> A1
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –≤ COURSE_CONTENT
    if level not in COURSE_CONTENT:
        await query.edit_message_text(
            f"""
‚ùå *–û—à–∏–±–∫–∞: —É—Ä–æ–≤–µ–Ω—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω*
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

–£—Ä–æ–≤–µ–Ω—å {level} –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.
–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π —É—Ä–æ–≤–µ–Ω—å.

üîÑ –ù–∞–∂–º–∏—Ç–µ /start –¥–ª—è –≤—ã–±–æ—Ä–∞ —É—Ä–æ–≤–Ω—è
""",
            parse_mode='Markdown'
        )
        return CHOOSING_LEVEL
    
    context.user_data['temp_level'] = level  # –í—Ä–µ–º–µ–Ω–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–ø–ª–∞—Ç–µ
    payment_message = f"""
‚ú® *–û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä - —É—Ä–æ–≤–µ–Ω—å {level}!*
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üìö *–í–∞—à –∫—É—Ä—Å –≤–∫–ª—é—á–∞–µ—Ç:*
‚Ä¢ –ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –Ω–∞ 14 –¥–Ω–µ–π
‚Ä¢ –í—Å–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∏ –∞—É–¥–∏–æ —É—Ä–æ–∫–∏
‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–º–∞—à–Ω–∏—Ö –∑–∞–¥–∞–Ω–∏–π
‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è

üí∞ *–°—Ç–æ–∏–º–æ—Å—Ç—å:* {LEVELS[level]['price']} —Ä—É–±.

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
üí´ –î–ª—è –Ω–∞—á–∞–ª–∞ –æ–±—É—á–µ–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–ø–ª–∞—Ç–∏—Ç—å –∫—É—Ä—Å
"""
    keyboard = [
        [InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –∫—É—Ä—Å", callback_data=f"pay_{level}")],
        [InlineKeyboardButton("üîô –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π —É—Ä–æ–≤–µ–Ω—å", callback_data="ready_to_choose")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(
        payment_message,
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )
    return PAYMENT

async def handle_payment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É"""
    query = update.callback_query
    await query.answer()
    
    user_id = update.effective_user.id
    logger.info(f"üí≥ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–ª –æ–ø–ª–∞—Ç—É")
    
    if not query.data.startswith('pay_'):
        return PAYMENT
    
    level = query.data.split('_')[1]
    price = LEVELS[level]['price']
    
    # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–ª–∞—Ç–µ–∂–∞
    payment_id = f"eng_course_{level}_{user_id}_{int(datetime.now().timestamp())}"
    context.user_data['payment_id'] = payment_id
    logger.info(f"üí∞ –°–æ–∑–¥–∞–Ω –ø–ª–∞—Ç–µ–∂ {payment_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è —Ñ–æ—Ä–º—ã –æ–ø–ª–∞—Ç—ã
    params = {
        'receiver': YOOMONEY_WALLET,
        'quickpay-form': 'shop',
        'targets': f'–û–ø–ª–∞—Ç–∞ –∫—É—Ä—Å–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ {level}',
        'paymentType': 'AC',
        'sum': price,
        'label': payment_id,
        'successURL': 'https://webhook.site/e5a7fe2c-4d55-4a15-bb11-9459fb2e4f03',
        'need-fio': 'false',
        'need-email': 'false',
        'need-phone': 'false',
        'need-address': 'false'
    }
    
    payment_url = f"https://yoomoney.ru/quickpay/confirm?{urlencode(params)}"
    
    yoomoney_message = f"""
üí≥ *–û–ø–ª–∞—Ç–∞ –∫—É—Ä—Å–∞ —É—Ä–æ–≤–Ω—è {level}*
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üí∞ *–°—Ç–æ–∏–º–æ—Å—Ç—å:* {price} —Ä—É–±.

‚ú® *–ß—Ç–æ –≤–∫–ª—é—á–µ–Ω–æ:*
üìö 14 –¥–Ω–µ–π –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è
üéØ 42 –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö —É—Ä–æ–∫–∞
üéß –ê—É–¥–∏–æ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –æ—Ç –Ω–æ—Å–∏—Ç–µ–ª–µ–π
üìù –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–º–∞—à–Ω–∏—Ö –∑–∞–¥–∞–Ω–∏–π
üë®‚Äçüè´ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è

üì± *–ö–∞–∫ –æ–ø–ª–∞—Ç–∏—Ç—å:*
1Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–û–ø–ª–∞—Ç–∏—Ç—å –∫–∞—Ä—Ç–æ–π"
2Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –±–∞–Ω–∫–æ–≤—Å–∫–æ–π –∫–∞—Ä—Ç—ã
3Ô∏è‚É£ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ–ø–ª–∞—Ç—É
4Ô∏è‚É£ –ù–∞–ø–∏—à–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É @renatblizkiy

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
‚ö†Ô∏è *–í–∞–∂–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:*
‚Ä¢ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—Ö–æ–¥–∏—Ç —á–µ—Ä–µ–∑ –∑–∞—â–∏—â–µ–Ω–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
‚Ä¢ –î–æ—Å—Ç—É–ø –æ—Ç–∫—Ä–æ–µ—Ç—Å—è –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã
‚Ä¢ –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ ID –ø–ª–∞—Ç–µ–∂–∞: `{payment_id}`
"""
    
    keyboard = [
        [InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –∫–∞—Ä—Ç–æ–π", url=payment_url)],
        [InlineKeyboardButton("‚úçÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É", url="https://t.me/renatblizkiy")],
        [InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥", callback_data=f"confirm_{level}")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(
        yoomoney_message,
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )
    return PAYMENT

async def show_daily_lesson(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —É—Ä–æ–∫ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –¥–Ω—è"""
    query = update.callback_query
    selected_time = "morning"  # –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    
    if query and query.data:
        if ":" in query.data:
            selected_time = query.data.split(":")[1]
        elif "_" in query.data:
            selected_time = query.data.split("_")[1]
            
        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è –¥–Ω—è
        if selected_time == "day":
            selected_time = "afternoon"
            
        await query.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å –∏ —É—Ä–æ–≤–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = update.effective_user.id
    user_data = get_user_data(user_id)
    
    if not user_data or 'level' not in user_data:
        message = """
‚ùå *–û—à–∏–±–∫–∞:* –£—Ä–æ–≤–µ–Ω—å –æ–±—É—á–µ–Ω–∏—è –Ω–µ –≤—ã–±—Ä–∞–Ω

üîÑ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ –æ–±—É—á–µ–Ω–∏—è
"""
        if query:
            await query.edit_message_text(message, parse_mode='Markdown')
        else:
            await update.message.reply_text(message, parse_mode='Markdown')
        return CHOOSING_LEVEL
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
    context.user_data.update(user_data)
    current_day = int(user_data.get('current_day', 1))
    user_level = user_data['level']
    
    try:
        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            if 'last_voice_message_id' in context.user_data:
                try:
                    await context.bot.delete_message(
                        chat_id=update.effective_chat.id,
                        message_id=context.user_data['last_voice_message_id']
                    )
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º current_day –≤ int –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–ª–æ–≤–∞—Ä—é
        current_lesson = COURSE_CONTENT[user_level][int(current_day)][selected_time]
        logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω —É—Ä–æ–∫: —É—Ä–æ–≤–µ–Ω—å {user_level}, –¥–µ–Ω—å {current_day}, –≤—Ä–µ–º—è {selected_time}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –¥–Ω—è –≤ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_data['time_of_day'] = selected_time
        update_user_data(user_id, user_data)
        context.user_data['time_of_day'] = selected_time
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —É—Ä–æ–∫–æ–º
        time_emoji = {"morning": "üåÖ", "afternoon": "‚òÄÔ∏è", "evening": "üåô"}
        time_names = {"morning": "–£—Ç—Ä–µ–Ω–Ω–∏–π", "afternoon": "–î–Ω–µ–≤–Ω–æ–π", "evening": "–í–µ—á–µ—Ä–Ω–∏–π"}
        
        message = f"""
‚ö†Ô∏è *–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –ø–ª–∞–Ω –æ–±—É—á–µ–Ω–∏—è!*

*–í–∞—à —Ç–µ–∫—É—â–∏–π –ø–ª–∞–Ω:*
‚Ä¢ –£—Ä–æ–≤–µ–Ω—å: {user_level} {get_level_emoji(user_level)}
‚Ä¢ –î–µ–Ω—å: {current_day} –∏–∑ 14 üìÖ
‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω–∏–π —É—Ä–æ–∫: {user_data.get('last_lesson_date')} üìÜ

–ü–ª–∞–Ω –æ–±—É—á–µ–Ω–∏—è –Ω–µ–ª—å–∑—è –∏–∑–º–µ–Ω–∏—Ç—å –¥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –∫—É—Ä—Å–∞

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üìö –î–µ–Ω—å {current_day} –∏–∑ 14
‚îî‚îÄ –£—Ä–æ–≤–µ–Ω—å: {user_level} {get_level_emoji(user_level)}
‚îî‚îÄ {time_emoji.get(selected_time, '')} {time_names.get(selected_time, '')} —É—Ä–æ–∫

üéØ –¢–µ–º–∞:
‚îî‚îÄ {current_lesson.get('topic', '')}

üìù –ù–æ–≤—ã–µ —Å–ª–æ–≤–∞:
"""
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª–æ–≤–∞ —Å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–µ–π –∏ –ø–µ—Ä–µ–≤–æ–¥–æ–º
        for i, word_data in enumerate(current_lesson.get('vocabulary', []), 1):
            if isinstance(word_data, dict):
                word = word_data.get('word', '')
                transcription = word_data.get('transcription', '')
                translation = word_data.get('translation', '')
                message += f"‚îî‚îÄ {i}. {word} [{transcription}] - {translation}\n"
            else:
                # –î–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å–æ —Å—Ç–∞—Ä—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º
                message += f"‚îî‚îÄ {i}. {word_data}\n"

        message += f"""
üî§ –ì—Ä–∞–º–º–∞—Ç–∏–∫–∞:
‚îî‚îÄ {current_lesson.get('grammar', '')}

‚úçÔ∏è –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ:
‚îî‚îÄ {current_lesson.get('practice', '')}

"""
        if 'pronunciation' in current_lesson:
            message += f"""
üéµ –ü—Ä–æ—Å–ª—É—à–∞–π—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ
‚îî‚îÄ {time_emoji.get(selected_time, '')} –£—Ä–æ–∫ –¥–ª—è –ø–µ—Ä–∏–æ–¥–∞: {time_names.get(selected_time, '')} —É—Ä–æ–∫
‚îî‚îÄ –ü–æ–≤—Ç–æ—Ä—è–π—Ç–µ –≤—Å–ª—É—Ö –¥–ª—è –ª—É—á—à–µ–≥–æ –∑–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è!
"""
        
        message += "\n‚è∞ –í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –¥–Ω—è –∏–ª–∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —É—Ä–æ–∫—É"
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        if query:
            await query.edit_message_text(
                text=message,
                parse_mode='Markdown',
                reply_markup=get_lesson_keyboard(selected_time, current_day)
            )
        else:
            await update.message.reply_text(
                text=message,
                parse_mode='Markdown',
                reply_markup=get_lesson_keyboard(selected_time, current_day)
            )
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å –∞—É–¥–∏–æ –¥–ª—è –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏—è, –ø–æ–ª—É—á–∞–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ
        if 'pronunciation' in current_lesson and 'text' in current_lesson['pronunciation']:
            try:
                audio_data = await get_pronunciation_audio(current_lesson['pronunciation']['text'])
                if audio_data:
                    caption = f"""
üéµ –ü—Ä–æ—Å–ª—É—à–∞–π—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ
‚îî‚îÄ {time_emoji.get(selected_time, '')} –£—Ä–æ–∫ –¥–ª—è –ø–µ—Ä–∏–æ–¥–∞: {time_names.get(selected_time, '')} —É—Ä–æ–∫
‚îî‚îÄ –ü–æ–≤—Ç–æ—Ä—è–π—Ç–µ –≤—Å–ª—É—Ö –¥–ª—è –ª—É—á—à–µ–≥–æ –∑–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è!"""
                    sent_message = await context.bot.send_voice(
                        chat_id=update.effective_chat.id,
                        voice=io.BytesIO(audio_data),
                        caption=caption
                    )
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                    context.user_data['last_voice_message_id'] = sent_message.message_id
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∞—É–¥–∏–æ: {str(e)}")
                
    except (KeyError, TypeError) as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —É—Ä–æ–∫–∞: {str(e)}, level={user_level}, day={current_day}, time={selected_time}")
        error_message = f"""
‚ö†Ô∏è *–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –ø–ª–∞–Ω –æ–±—É—á–µ–Ω–∏—è!*

*–í–∞—à —Ç–µ–∫—É—â–∏–π –ø–ª–∞–Ω:*
‚Ä¢ –£—Ä–æ–≤–µ–Ω—å: {user_level} {get_level_emoji(user_level)}
‚Ä¢ –î–µ–Ω—å: {current_day} –∏–∑ 14 üìÖ
‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω–∏–π —É—Ä–æ–∫: {user_data.get('last_lesson_date')} üìÜ

–ü–ª–∞–Ω –æ–±—É—á–µ–Ω–∏—è –Ω–µ–ª—å–∑—è –∏–∑–º–µ–Ω–∏—Ç—å –¥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –∫—É—Ä—Å–∞
"""
        if query:
            await query.edit_message_text(error_message, parse_mode='Markdown')
        else:
            await update.message.reply_text(error_message, parse_mode='Markdown')
            
    return SHOWING_LESSON

async def handle_time_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏ –¥–Ω—è"""
    query = update.callback_query
    if not query:
        return SHOWING_LESSON
    await query.answer()
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –¥–Ω—è –∏–∑ callback_data
        if ":" in query.data:
            time_of_day = query.data.split(":")[1]
        else:
            time_of_day = query.data.split("_")[1]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤—Ä–µ–º–µ–Ω–∏ –¥–Ω—è
        if time_of_day not in ["morning", "afternoon", "evening"]:
            logger.error(f"‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è –¥–Ω—è: {time_of_day}")
            return SHOWING_LESSON
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –¥–Ω—è –≤ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        context.user_data['time_of_day'] = time_of_day
        
        await show_daily_lesson(update, context)
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏: {e}")
        return SHOWING_LESSON
    
    return SHOWING_LESSON

async def next_lesson(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —É—Ä–æ–∫—É"""
    query = update.callback_query
    await query.answer()
    
    user_id = update.effective_user.id
    
    if not can_access_next_lesson(user_id):
        # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–∫–∞
        user_data = get_user_data(user_id)
        last_lesson_date = datetime.fromisoformat(user_data.get('last_lesson_date', '2000-01-01'))
        next_lesson_time = last_lesson_date + timedelta(days=1)
        time_left = next_lesson_time - datetime.now()
        hours_left = int(time_left.total_seconds() / 3600)
        minutes_left = int((time_left.total_seconds() % 3600) / 60)
        
        message = f"""
‚è≥ *–°–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–∫ –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω*
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

‚åõÔ∏è *–î–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–∫–∞ –æ—Å—Ç–∞–ª–æ—Å—å:*
üïê {hours_left} —á–∞—Å–æ–≤ –∏ {minutes_left} –º–∏–Ω—É—Ç

üí° *–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:*
‚Ä¢ –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª —Ç–µ–∫—É—â–µ–≥–æ —É—Ä–æ–∫–∞
‚Ä¢ –í—ã–ø–æ–ª–Ω–∏—Ç–µ –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ
‚Ä¢ –ü—Ä–∞–∫—Ç–∏–∫—É–π—Ç–µ –Ω–æ–≤—ã–µ —Å–ª–æ–≤–∞
‚Ä¢ –°–ª—É—à–∞–π—Ç–µ –∞—É–¥–∏–æ –º–∞—Ç–µ—Ä–∏–∞–ª—ã

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
‚ú® –í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å –∑–∞–≤—Ç—Ä–∞ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –æ–±—É—á–µ–Ω–∏—è!
"""
        await query.edit_message_text(
            message,
            parse_mode='Markdown',
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîÑ –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Ç–µ–∫—É—â–µ–º—É —É—Ä–æ–∫—É", callback_data="return_current")
            ]])
        )
        return SHOWING_LESSON
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–µ–Ω—å –∏ –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É—Ä–æ–∫–∞
    current_day = int(context.user_data.get('day', 1))
    context.user_data['day'] = current_day + 1
    
    if context.user_data['day'] > 14:
        completion_message = """
üéâ *–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ–º –∫—É—Ä—Å–∞!* üéâ
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

‚ú® –í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à–ª–∏ 14-–¥–Ω–µ–≤–Ω—ã–π –∫—É—Ä—Å –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞! 

üìä *–í–∞—à–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:*
üìö –ò–∑—É—á–µ–Ω–æ –º–Ω–æ–∂–µ—Å—Ç–≤–æ –Ω–æ–≤—ã—Ö —Å–ª–æ–≤
üìù –û—Å–≤–æ–µ–Ω—ã –≤–∞–∂–Ω—ã–µ –≥—Ä–∞–º–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ç–µ–º—ã
üéß –£–ª—É—á—à–µ–Ω–æ –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ
üí≠ –ü–æ–ª—É—á–µ–Ω–∞ –ø—Ä–∞–∫—Ç–∏–∫–∞ –≤ —Ä–∞–∑–≥–æ–≤–æ—Ä–Ω–æ–π —Ä–µ—á–∏

üåü *–ß—Ç–æ –¥–∞–ª—å—à–µ?*
‚Ä¢ –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –ø—Ä–∞–∫—Ç–∏–∫–æ–≤–∞—Ç—å —è–∑—ã–∫
‚Ä¢ –°–º–æ—Ç—Ä–∏—Ç–µ —Ñ–∏–ª—å–º—ã –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º
‚Ä¢ –ß–∏—Ç–∞–π—Ç–µ –∫–Ω–∏–≥–∏ –∏ —Å—Ç–∞—Ç—å–∏
‚Ä¢ –û–±—â–∞–π—Ç–µ—Å—å —Å –Ω–æ—Å–∏—Ç–µ–ª—è–º–∏ —è–∑—ã–∫–∞

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
üîÑ –î–ª—è –Ω–∞—á–∞–ª–∞ –Ω–æ–≤–æ–≥–æ –∫—É—Ä—Å–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start

_–ñ–µ–ª–∞–µ–º –¥–∞–ª—å–Ω–µ–π—à–∏—Ö —É—Å–ø–µ—Ö–æ–≤ –≤ –∏–∑—É—á–µ–Ω–∏–∏ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞!_ üöÄ
"""
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        update_user_data(user_id, {})
        
        await query.edit_message_text(
            completion_message,
            parse_mode='Markdown'
        )
        return ConversationHandler.END
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_data = context.user_data.copy()
    user_data['last_lesson_date'] = datetime.now().isoformat()
    update_user_data(user_id, user_data)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º current_day –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —É—Ä–æ–∫–∞
    context.user_data['current_day'] = context.user_data['day']
    
    await show_daily_lesson(update, context)
    return SHOWING_LESSON

async def return_to_current_lesson(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ —Ç–µ–∫—É—â–µ–º—É —É—Ä–æ–∫—É"""
    query = update.callback_query
    await query.answer()
    
    user_id = update.effective_user.id
    user_data = get_user_data(user_id)
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –¥–Ω—è –∏–∑ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    time_of_day = user_data.get('time_of_day', 'morning')
    
    # –û–±–Ω–æ–≤–ª—è–µ–º callback_data –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–Ω—è
    context.user_data['callback_query'] = f"time:{time_of_day}"
    
    await show_daily_lesson(update, context)
    return SHOWING_LESSON

async def activate_course(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ê–∫—Ç–∏–≤–∞—Ü–∏—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∫—É—Ä—Å—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if update.effective_user.id != ADMIN_USER_ID:
        await update.message.reply_text(
            "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.",
            parse_mode='Markdown'
        )
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã
    try:
        # –§–æ—Ä–º–∞—Ç: /activate USER_ID LEVEL
        _, user_id, level = update.message.text.split()
        user_id = int(user_id)
    except ValueError:
        await update.message.reply_text(
            "‚ùå *–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã*\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `/activate USER_ID LEVEL`\n–ü—Ä–∏–º–µ—Ä: `/activate 123456789 A1`",
            parse_mode='Markdown'
        )
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —É—Ä–æ–≤–Ω—è
    if level not in LEVELS:
        await update.message.reply_text(
            f"‚ùå *–ù–µ–≤–µ—Ä–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å*\n–î–æ—Å—Ç—É–ø–Ω—ã–µ —É—Ä–æ–≤–Ω–∏: {', '.join(LEVELS.keys())}",
            parse_mode='Markdown'
        )
        return

    # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø –∫ –∫—É—Ä—Å—É
    user_data = {
        'level': level,
        'current_day': 1,
        'day': 1,
        'max_day': 1,  # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –¥–Ω—è
        'last_lesson_date': (datetime.now() - timedelta(days=1)).isoformat(),  # –ü–æ–∑–≤–æ–ª—è–µ—Ç –Ω–∞—á–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ —Å—Ä–∞–∑—É
        'time_of_day': 'morning'
    }
    update_user_data(user_id, user_data)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
    await update.message.reply_text(
        f"""
‚úÖ *–î–æ—Å—Ç—É–ø —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω*

*–î–µ—Ç–∞–ª–∏:*
‚Ä¢ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: `{user_id}`
‚Ä¢ –£—Ä–æ–≤–µ–Ω—å –∫—É—Ä—Å–∞: {level} {get_level_emoji(level)}
‚Ä¢ –ù–∞—á–∞–ª—å–Ω—ã–π –¥–µ–Ω—å: 1
‚Ä¢ –î–æ—Å—Ç—É–ø –∫ —É—Ä–æ–∫–∞–º: –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω

–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –Ω–∞—á–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–∏–≤ –∫–æ–º–∞–Ω–¥—É /start
""",
        parse_mode='Markdown'
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    try:
        await context.bot.send_message(
            chat_id=user_id,
            text=f"""
üéâ *–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í–∞—à –∫—É—Ä—Å —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!* üéâ

*–î–µ—Ç–∞–ª–∏ –≤–∞—à–µ–≥–æ –∫—É—Ä—Å–∞:*
‚Ä¢ –£—Ä–æ–≤–µ–Ω—å: {level} {get_level_emoji(level)}
‚Ä¢ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: 14 –¥–Ω–µ–π
‚Ä¢ –§–æ—Ä–º–∞—Ç: 3 —É—Ä–æ–∫–∞ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å (—É—Ç—Ä–æ/–¥–µ–Ω—å/–≤–µ—á–µ—Ä)
‚Ä¢ –î–æ—Å—Ç—É–ø: –ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º

*–ß—Ç–æ –¥–∞–ª—å—à–µ?*
1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /start
2. –ù–∞—á–Ω–∏—Ç–µ –æ–±—É—á–µ–Ω–∏–µ —Å –ø–µ—Ä–≤–æ–≥–æ —É—Ä–æ–∫–∞
3. –ó–∞–Ω–∏–º–∞–π—Ç–µ—Å—å –≤ —É–¥–æ–±–Ω–æ–µ –¥–ª—è –≤–∞—Å –≤—Ä–µ–º—è

*–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –∫—É—Ä—Å–∞:*
‚Ä¢ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ —É—Ä–æ–∫–∏
‚Ä¢ –ê—É–¥–∏–æ —Å –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ–º
‚Ä¢ –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞–Ω–∏—è
‚Ä¢ –ì—Ä–∞–º–º–∞—Ç–∏–∫–∞ –∏ –Ω–æ–≤—ã–µ —Å–ª–æ–≤–∞

–ñ–µ–ª–∞–µ–º —É—Å–ø–µ—Ö–æ–≤ –≤ –∏–∑—É—á–µ–Ω–∏–∏ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞! üìö‚ú®
""",
            parse_mode='Markdown'
        )
    except Exception as e:
        await update.message.reply_text(
            f"‚ö†Ô∏è *–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ:* –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.\n–í–æ–∑–º–æ–∂–Ω–æ, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞—á–∞–ª –¥–∏–∞–ª–æ–≥ —Å –±–æ—Ç–æ–º.",
            parse_mode='Markdown'
        )

async def handle_homework_request(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è"""
    query = update.callback_query
    await query.answer()
    
    time_of_day = query.data.split('_')[2] if len(query.data.split('_')) > 2 else 'morning'
    level = context.user_data['level']
    day = context.user_data['day']
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –∑–∞–¥–∞–Ω–∏–∏ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    context.user_data['homework_info'] = {
        'level': level,
        'day': day,
        'time_of_day': time_of_day
    }
    
    await query.edit_message_text(
        f"""
üìù *–û—Ç–ø—Ä–∞–≤–∫–∞ –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è*
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üé§ –ó–∞–ø–∏—à–∏—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–º –∑–∞–¥–∞–Ω–∏–µ–º
–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –≤ —ç—Ç–æ—Ç —á–∞—Ç.

*–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—Ä–æ–∫–µ:*
üìö –£—Ä–æ–≤–µ–Ω—å: {level} {get_level_emoji(level)}
üìÖ –î–µ–Ω—å: {day} –∏–∑ 14
‚è∞ –í—Ä–µ–º—è: {time_of_day}

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
‚ö†Ô∏è _–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å._
_–ë–æ—Ç –æ–∂–∏–¥–∞–µ—Ç –≤–∞—à—É –∑–∞–ø–∏—Å—å..._
""",
        parse_mode='Markdown',
        reply_markup=InlineKeyboardMarkup([[
            InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —É—Ä–æ–∫—É", callback_data=f"time_{time_of_day}")
        ]])
    )
    return WAITING_HOMEWORK

async def handle_homework_voice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –¥–æ–º–∞—à–Ω–∏–º –∑–∞–¥–∞–Ω–∏–µ–º"""
    user_id = update.effective_user.id
    logger.info(f"üìù –ü–æ–ª—É—á–µ–Ω–æ –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    
    if not update.message.voice:
        await update.message.reply_text(
            """
‚ùå *–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–¥–∞–Ω–∏—è*
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–º –∑–∞–¥–∞–Ω–∏–µ–º.

üí° *–ö–∞–∫ –∑–∞–ø–∏—Å–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ:*
1Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ –∏ —É–¥–µ—Ä–∂–∏–≤–∞–π—Ç–µ –∫–Ω–æ–ø–∫—É –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞
2Ô∏è‚É£ –ó–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç
3Ô∏è‚É£ –û—Ç–ø—É—Å—Ç–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
""",
            parse_mode='Markdown'
        )
        return WAITING_HOMEWORK
    
    homework_info = context.user_data.get('homework_info', {})
    if not homework_info:
        await update.message.reply_text(
            """
‚ùå *–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–¥–∞–Ω–∏—è*
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É –∑–∞–¥–∞–Ω–∏—è –∑–∞–Ω–æ–≤–æ.

üîÑ –í–µ—Ä–Ω–∏—Ç–µ—Å—å –∫ —É—Ä–æ–∫—É –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É
"–û—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ"
""",
            parse_mode='Markdown'
        )
        return SHOWING_LESSON
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
    file_id = update.message.voice.file_id
    
    try:
        # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        admin_message = f"""
üì¨ *–ù–æ–≤–æ–µ –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ*
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üë§ *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç—É–¥–µ–Ω—Ç–µ:*
‚Ä¢ ID: `{update.effective_user.id}`
‚Ä¢ –ò–º—è: {update.effective_user.first_name}
‚Ä¢ Username: @{update.effective_user.username or '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}

üìö *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—Ä–æ–∫–µ:*
‚Ä¢ –£—Ä–æ–≤–µ–Ω—å: {homework_info['level']} {get_level_emoji(homework_info['level'])}
‚Ä¢ –î–µ–Ω—å: {homework_info['day']} –∏–∑ 14
‚Ä¢ –í—Ä–µ–º—è: {homework_info['time_of_day']}

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
‚úçÔ∏è –û—Ü–µ–Ω–∏—Ç–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è:
"""
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        await context.bot.send_message(
            chat_id=ADMIN_USER_ID,
            text=admin_message,
            parse_mode='Markdown'
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        await context.bot.send_voice(
            chat_id=ADMIN_USER_ID,
            voice=file_id,
            reply_markup=InlineKeyboardMarkup([
                [
                    InlineKeyboardButton("üëç –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"hw_approve_{update.effective_user.id}"),
                    InlineKeyboardButton("üëé –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"hw_reject_{update.effective_user.id}")
                ]
            ])
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—Ç—É
        await update.message.reply_text(
            """
‚úÖ *–î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!*
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üìù –í–∞—à–µ –∑–∞–¥–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É
üë®‚Äçüè´ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –ø—Ä–æ–≤–µ—Ä–∏—Ç –µ–≥–æ –∏ –¥–∞—Å—Ç –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å
üîî –í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º

üí° *–ß—Ç–æ –¥–∞–ª—å—à–µ?*
‚Ä¢ –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –æ–±—É—á–µ–Ω–∏–µ
‚Ä¢ –ò–∑—É—á–∞–π—Ç–µ –Ω–æ–≤—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã
‚Ä¢ –ü—Ä–∞–∫—Ç–∏–∫—É–π—Ç–µ —è–∑—ã–∫

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
üîÑ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ —É—Ä–æ–∫—É
""",
            parse_mode='Markdown',
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —É—Ä–æ–∫—É", callback_data=f"time_{homework_info['time_of_day']}")
            ]])
        )
        
        return SHOWING_LESSON
        
    except telegram.error.Unauthorized:
        logger.error("–û—à–∏–±–∫–∞: –ë–æ—Ç –Ω–µ –º–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É (–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω)")
        await update.message.reply_text(
            """
‚ùå *–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–¥–∞–Ω–∏—è*
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

–ü—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞.
–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.

üí° –ü—Ä–∏ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–∏ –æ—à–∏–±–∫–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å
–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É @renatblizkiy
""",
            parse_mode='Markdown'
        )
        return WAITING_HOMEWORK
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è: {str(e)}")
        await update.message.reply_text(
            """
‚ùå *–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–¥–∞–Ω–∏—è*
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

–ü—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞.
–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.

üí° –ü—Ä–∏ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–∏ –æ—à–∏–±–∫–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å
–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É @renatblizkiy
""",
            parse_mode='Markdown'
        )
        return WAITING_HOMEWORK

async def handle_homework_feedback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ü–µ–Ω–∫–∏ –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    query = update.callback_query
    admin_id = query.from_user.id
    
    if admin_id != ADMIN_USER_ID:
        logger.warning(f"‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ –Ω–µ—Å–∞–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –æ—Ü–µ–Ω–∫–µ –î–ó –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {admin_id}")
        await query.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–µ–π—Å—Ç–≤–∏–µ (approve/reject) –∏ ID —Å—Ç—É–¥–µ–Ω—Ç–∞ –∏–∑ callback_data
    action, student_id = query.data.split('_')[1:3]
    student_id = int(student_id)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—Ç—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ—Ü–µ–Ω–∫–∏
    if action == 'approve':
        message = """
‚úÖ *–î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ!*
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üåü –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –æ–¥–æ–±—Ä–∏–ª
–≤–∞—à–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è.

üí° *–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:*
‚Ä¢ –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ
‚Ä¢ –ü—Ä–∞–∫—Ç–∏–∫—É–π—Ç–µ –Ω–æ–≤—ã–µ —Å–ª–æ–≤–∞
‚Ä¢ –í—ã–ø–æ–ª–Ω—è–π—Ç–µ –≤—Å–µ –∑–∞–¥–∞–Ω–∏—è
‚Ä¢ –°–ª–µ–¥–∏—Ç–µ –∑–∞ –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ–º

‚ú® –£—Å–ø–µ—Ö–æ–≤ –≤ –¥–∞–ª—å–Ω–µ–π—à–µ–º –æ–±—É—á–µ–Ω–∏–∏!
"""
    else:
        message = """
‚ö†Ô∏è *–î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ —Ç—Ä–µ–±—É–µ—Ç –¥–æ—Ä–∞–±–æ—Ç–∫–∏*
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üí° *–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è:*
‚Ä¢ –í–Ω–∏–º–∞—Ç–µ–ª—å–Ω–µ–µ —Å–ª–µ–¥–∏—Ç–µ –∑–∞ –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ–º
‚Ä¢ –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≥—Ä–∞–º–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∞–≤–∏–ª–∞
‚Ä¢ –ü—Ä–∞–∫—Ç–∏–∫—É–π—Ç–µ –Ω–æ–≤—ã–µ —Å–ª–æ–≤–∞
‚Ä¢ –ó–∞–ø–∏—à–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ –µ—â–µ —Ä–∞–∑

üìù *–ß—Ç–æ –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ:*
1Ô∏è‚É£ –í–µ—Ä–Ω–∏—Ç–µ—Å—å –∫ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º —É—Ä–æ–∫–∞
2Ô∏è‚É£ –ò–∑—É—á–∏—Ç–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
3Ô∏è‚É£ –ó–∞–ø–∏—à–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ –∑–∞–Ω–æ–≤–æ
4Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É

‚ú® –ú—ã –≤–µ—Ä–∏–º –≤ –≤–∞—à —É—Å–ø–µ—Ö!
"""
    
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—Ç—É
        await context.bot.send_message(
            chat_id=student_id,
            text=message,
            parse_mode='Markdown'
        )
        
        # –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        await query.edit_message_reply_markup(reply_markup=None)
        await query.answer("‚úÖ –û—Ü–µ–Ω–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Å—Ç—É–¥–µ–Ω—Ç—É")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ü–µ–Ω–∫–∏: {e}")
        await query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ü–µ–Ω–∫–∏")

async def handle_pre_checkout(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–µ-—á–µ–∫–∞—É—Ç–∞ –ø–ª–∞—Ç–µ–∂–∞"""
    query = update.pre_checkout_query
    await query.answer(ok=True)
    return PAYMENT

async def handle_successful_payment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞"""
    payment_info = update.message.successful_payment
    user_id = update.effective_user.id
    logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–∞—è –æ–ø–ª–∞—Ç–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    
    # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫—É—Ä—Å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    level = context.user_data.get('temp_level')
    if not level:
        await update.message.reply_text(
            """
‚ùå *–û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∫—É—Ä—Å–∞*
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ,
–∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–º–∞–Ω–¥—É /start

üí° –ü—Ä–∏ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–∏ –æ—à–∏–±–∫–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å
–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É @renatblizkiy
""",
            parse_mode='Markdown'
        )
        return ConversationHandler.END
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_data = {
        'level': level,
        'day': 1,
        'max_day': 1,  # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –¥–Ω—è
        'last_lesson_date': (datetime.now() - timedelta(days=1)).isoformat(),
        'time_of_day': 'morning'
    }
    update_user_data(user_id, user_data)
    context.user_data.update(user_data)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
    success_message = f"""
üéâ *–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í–∞—à –∫—É—Ä—Å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!* üéâ
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üìö *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫—É—Ä—Å–µ:*
‚Ä¢ –£—Ä–æ–≤–µ–Ω—å: {level} {get_level_emoji(level)}
‚Ä¢ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: 14 –¥–Ω–µ–π
‚Ä¢ –§–æ—Ä–º–∞—Ç: 3 —É—Ä–æ–∫–∞ –≤ –¥–µ–Ω—å
‚Ä¢ –î–æ—Å—Ç—É–ø: –ü–æ–ª–Ω—ã–π

‚ú® *–ß—Ç–æ –≤–∫–ª—é—á–µ–Ω–æ:*
‚Ä¢ –í—Å–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∏ —É—Ä–æ–∫–∏
‚Ä¢ –ê—É–¥–∏–æ –æ—Ç –Ω–æ—Å–∏—Ç–µ–ª–µ–π —è–∑—ã–∫–∞
‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–º–∞—à–Ω–∏—Ö –∑–∞–¥–∞–Ω–∏–π
‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞

üí° *–ö–∞–∫ –Ω–∞—á–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ:*
1Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ù–∞—á–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ"
2Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è —É—Ä–æ–∫–∞
3Ô∏è‚É£ –°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –≤ —É—Ä–æ–∫–µ
4Ô∏è‚É£ –í—ã–ø–æ–ª–Ω—è–π—Ç–µ –¥–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
‚ú® –ñ–µ–ª–∞–µ–º —É—Å–ø–µ—Ö–æ–≤ –≤ –∏–∑—É—á–µ–Ω–∏–∏ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞!
"""
    keyboard = [[InlineKeyboardButton("üöÄ –ù–∞—á–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ", callback_data="time:morning")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        success_message,
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )
    return SHOWING_LESSON

def create_lesson_navigation(current_day: int, context: ContextTypes.DEFAULT_TYPE) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —É—Ä–æ–∫–∞–º"""
    keyboard = [
        [
            InlineKeyboardButton("üåÖ –£—Ç—Ä–µ–Ω–Ω–∏–π —É—Ä–æ–∫", callback_data="time:morning"),
            InlineKeyboardButton("‚òÄÔ∏è –î–Ω–µ–≤–Ω–æ–π —É—Ä–æ–∫", callback_data="time:afternoon"),
        ],
        [
            InlineKeyboardButton("üåô –í–µ—á–µ—Ä–Ω–∏–π —É—Ä–æ–∫", callback_data="time:evening")
        ],
        [InlineKeyboardButton("üìù –û—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ", callback_data=f"homework_{context.user_data.get('time_of_day', 'morning')}")]
    ]
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –¥–Ω—è–º
    nav_buttons = []
    if current_day > 1:
        nav_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è –î–µ–Ω—å –Ω–∞–∑–∞–¥", callback_data="prev_day"))
    if current_day < 14:
        nav_buttons.append(InlineKeyboardButton("–î–µ–Ω—å –≤–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data="next_day"))
    
    if nav_buttons:
        keyboard.append(nav_buttons)
    
    return InlineKeyboardMarkup(keyboard)

def get_lesson_keyboard(time_of_day: str, current_day: int) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —É—Ä–æ–∫–∞–º"""
    keyboard = [
        [
            InlineKeyboardButton("üåÖ –£—Ç—Ä–µ–Ω–Ω–∏–π —É—Ä–æ–∫", callback_data="time:morning"),
            InlineKeyboardButton("‚òÄÔ∏è –î–Ω–µ–≤–Ω–æ–π —É—Ä–æ–∫", callback_data="time:afternoon"),
        ],
        [
            InlineKeyboardButton("üåô –í–µ—á–µ—Ä–Ω–∏–π —É—Ä–æ–∫", callback_data="time:evening")
        ]
    ]
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è
    keyboard.append([InlineKeyboardButton("üìù –û—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ", callback_data=f"homework_{time_of_day}")])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –¥–Ω—è–º
    nav_buttons = []
    if current_day > 1:
        nav_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∏–π –¥–µ–Ω—å", callback_data="prev_day"))
    if current_day < 14:
        nav_buttons.append(InlineKeyboardButton("–°–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å ‚û°Ô∏è", callback_data="next_day"))
    
    if nav_buttons:
        keyboard.append(nav_buttons)
    
    return InlineKeyboardMarkup(keyboard)

async def handle_prev_day(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É –¥–Ω—é"""
    query = update.callback_query
    await query.answer()
    
    user_id = update.effective_user.id
    user_data = get_user_data(user_id)
    current_day = int(user_data.get('current_day', 1))
    max_day = int(user_data.get('max_day', current_day))  # –ü–æ–ª—É—á–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –¥–æ—Å—Ç–∏–≥–Ω—É—Ç—ã–π –¥–µ–Ω—å
    time_of_day = user_data.get('time_of_day', 'morning')
    
    if current_day > 1:
        current_day -= 1
        user_data['current_day'] = current_day
        user_data['day'] = current_day
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –¥–æ—Å—Ç–∏–≥–Ω—É—Ç—ã–π –¥–µ–Ω—å
        user_data['max_day'] = max_day
        update_user_data(user_id, user_data)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
        context.user_data.update(user_data)
        
        await show_daily_lesson(update, context)
    else:
        await query.answer("‚ùå –í—ã —É–∂–µ –Ω–∞ –ø–µ—Ä–≤–æ–º –¥–Ω–µ –æ–±—É—á–µ–Ω–∏—è")
    return SHOWING_LESSON

async def handle_next_day(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –¥–Ω—é"""
    query = update.callback_query
    await query.answer()
    
    user_id = update.effective_user.id
    user_data = get_user_data(user_id)
    current_day = int(user_data.get('current_day', 1))
    max_day = int(user_data.get('max_day', current_day))
    time_of_day = user_data.get('time_of_day', 'morning')
    
    # –ï—Å–ª–∏ –ø—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–π—Ç–∏ –∫ –Ω–æ–≤–æ–º—É –¥–Ω—é (–ø—Ä–µ–≤—ã—à–∞—é—â–µ–º—É –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π)
    if current_day >= max_day:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—à–ª–æ –ª–∏ 24 —á–∞—Å–∞ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É—Ä–æ–∫–∞
        last_lesson_date = datetime.fromisoformat(user_data.get('last_lesson_date', '2000-01-01'))
        time_since_last_lesson = datetime.now() - last_lesson_date
        seconds_left = 24 * 3600 - time_since_last_lesson.total_seconds()
        
        if seconds_left > 0:
            hours_left = int(seconds_left // 3600)
            minutes_left = int((seconds_left % 3600) // 60)
            seconds = int(seconds_left % 60)
            
            keyboard = [
                [InlineKeyboardButton("üîÑ –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Ç–µ–∫—É—â–µ–º—É —É—Ä–æ–∫—É", callback_data=f"time:{time_of_day}")],
                [InlineKeyboardButton("üìù –û—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ", callback_data=f"homework_{time_of_day}")]
            ]
            
            message = f"""
‚è≥ *–î–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–∫–∞ –æ—Å—Ç–∞–ª–æ—Å—å:*
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

‚åõÔ∏è {hours_left:02d}:{minutes_left:02d}:{seconds:02d}

*–í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å:*
üìö –£—Ä–æ–≤–µ–Ω—å: {user_data['level']} {get_level_emoji(user_data['level'])}
üìÖ –¢–µ–∫—É—â–∏–π –¥–µ–Ω—å: {current_day} –∏–∑ 14
üìä –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –¥–µ–Ω—å: {max_day}

üí° *–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:*
‚Ä¢ –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª —Ç–µ–∫—É—â–µ–≥–æ —É—Ä–æ–∫–∞
‚Ä¢ –í—ã–ø–æ–ª–Ω–∏—Ç–µ –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ
‚Ä¢ –ü—Ä–∞–∫—Ç–∏–∫—É–π—Ç–µ –Ω–æ–≤—ã–µ —Å–ª–æ–≤–∞
‚Ä¢ –°–ª—É—à–∞–π—Ç–µ –∞—É–¥–∏–æ –º–∞—Ç–µ—Ä–∏–∞–ª—ã

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
‚ú® –í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å –ø–æ–∑–∂–µ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –æ–±—É—á–µ–Ω–∏—è!
"""
            await query.edit_message_text(
                message,
                parse_mode='Markdown',
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            return SHOWING_LESSON
    
    if current_day < 14:
        current_day += 1
        user_data['current_day'] = current_day
        user_data['day'] = current_day
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –¥–æ—Å—Ç–∏–≥–Ω—É—Ç—ã–π –¥–µ–Ω—å, –µ—Å–ª–∏ —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å –±–æ–ª—å—à–µ
        if current_day > max_day:
            user_data['max_day'] = current_day
            user_data['last_lesson_date'] = datetime.now().isoformat()
        
        update_user_data(user_id, user_data)
        context.user_data.update(user_data)
        
        await show_daily_lesson(update, context)
    else:
        await query.answer("‚ùå –í—ã —É–∂–µ –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–º –¥–Ω–µ –æ–±—É—á–µ–Ω–∏—è")
    return SHOWING_LESSON

def check_environment():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ñ–∞–π–ª–æ–≤ –∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ .env —Ñ–∞–π–ª–∞
        if not os.path.exists('.env'):
            logger.warning("‚ö†Ô∏è –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π
        Path(BACKUP_DIR).mkdir(exist_ok=True)
        logger.info("‚úÖ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π –≥–æ—Ç–æ–≤–∞")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        if not os.path.exists(USERS_DATA_FILE):
            # –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π —Ñ–∞–π–ª
            save_users_data({})
            logger.info("‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —Ñ–∞–π–ª –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ course_content.py
        if not os.path.exists('course_content.py'):
            logger.error("‚ùå –§–∞–π–ª course_content.py –Ω–µ –Ω–∞–π–¥–µ–Ω")
            raise FileNotFoundError("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ñ–∞–π–ª course_content.py")
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É COURSE_CONTENT
        if not isinstance(COURSE_CONTENT, dict):
            logger.error("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ COURSE_CONTENT")
            raise ValueError("COURSE_CONTENT –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–ª–æ–≤–∞—Ä–µ–º")
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö —É—Ä–æ–≤–Ω–µ–π
        for level in LEVELS.keys():
            if level not in COURSE_CONTENT:
                logger.warning(f"‚ö†Ô∏è –í COURSE_CONTENT –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —É—Ä–æ–≤–µ–Ω—å {level}")
                
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —É—Ä–æ–∫–æ–≤
        for level, days in COURSE_CONTENT.items():
            if not isinstance(days, dict):
                logger.error(f"‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–Ω–µ–π –¥–ª—è —É—Ä–æ–≤–Ω—è {level}")
                continue
                
            for day, times in days.items():
                if not isinstance(times, dict):
                    logger.error(f"‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è —É—Ä–æ–≤–Ω—è {level}, –¥–µ–Ω—å {day}")
                    continue
                    
                for time_of_day, lesson in times.items():
                    if not isinstance(lesson, dict):
                        logger.error(f"‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —É—Ä–æ–∫–∞ –¥–ª—è —É—Ä–æ–≤–Ω—è {level}, –¥–µ–Ω—å {day}, –≤—Ä–µ–º—è {time_of_day}")
                        continue
                        
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è —É—Ä–æ–∫–∞
                    required_fields = ['topic', 'vocabulary', 'grammar', 'practice']
                    missing_fields = [field for field in required_fields if field not in lesson]
                    if missing_fields:
                        logger.warning(f"‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–æ–ª—è {', '.join(missing_fields)} –≤ —É—Ä–æ–∫–µ {level}, –¥–µ–Ω—å {day}, –≤—Ä–µ–º—è {time_of_day}")
        
        logger.info("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        return True
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: {e}")
        return False

def main():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞"""
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
        load_dotenv()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–∫—Ä—É–∂–µ–Ω–∏–µ
        if not check_environment():
            logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        token = os.getenv('TELEGRAM_TOKEN')
        
        if not token:
            logger.error("‚ùå –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ñ–∞–π–ª–µ .env")
            return
        
        # –°–æ–∑–¥–∞–µ–º –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –±–æ—Ç–∞
        application = Application.builder().token(token).build()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
        conv_handler = ConversationHandler(
            entry_points=[CommandHandler('start', start)],
            states={
                CHOOSING_LEVEL: [
                    CallbackQueryHandler(handle_ready_choice, pattern="^(ready_to_choose|not_ready)$"),
                    CallbackQueryHandler(level_chosen, pattern="^confirm_")
                ],
                PAYMENT: [
                    PreCheckoutQueryHandler(handle_pre_checkout),
                    MessageHandler(filters.SUCCESSFUL_PAYMENT, handle_successful_payment),
                    CallbackQueryHandler(handle_payment, pattern="^pay_"),
                    CallbackQueryHandler(handle_ready_choice, pattern="^ready_to_choose$")
                ],
                SHOWING_LESSON: [
                    CallbackQueryHandler(handle_time_selection, pattern="^time[_:]"),
                    CallbackQueryHandler(handle_prev_day, pattern="^prev_day$"),
                    CallbackQueryHandler(handle_next_day, pattern="^next_day$"),
                    CallbackQueryHandler(handle_homework_request, pattern="^homework_"),
                    CallbackQueryHandler(return_to_current_lesson, pattern="^return_current$"),
                    CallbackQueryHandler(handle_homework_feedback, pattern="^hw_(approve|reject)_"),
                    MessageHandler(filters.VOICE, handle_homework_voice)
                ],
                WAITING_HOMEWORK: [
                    MessageHandler(filters.VOICE, handle_homework_voice),
                    CallbackQueryHandler(handle_time_selection, pattern="^time[_:]")
                ]
            },
            fallbacks=[CommandHandler('start', start)],
            per_message=False,
            per_chat=False
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        application.add_handler(conv_handler)
        application.add_handler(CommandHandler('activate', activate_course))
        application.add_handler(CallbackQueryHandler(handle_homework_feedback, pattern="^hw_(approve|reject)_"))  # –î–æ–±–∞–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        
        logger.info("üöÄ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ –∑–∞–ø—É—Å–∫—É")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        application.run_polling(allowed_updates=Update.ALL_TYPES)
        
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
        raise

if __name__ == '__main__':
    main() 